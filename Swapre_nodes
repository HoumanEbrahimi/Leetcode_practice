Given a linked list, swap every two adjacent nodes and return its head.
You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """

        merged=[]

        while head is not None:
            merged.append(head.val)
            head=head.next

        for i in range(len(merged)):
            if(i%2==0 and i+1!=len(merged)):
                value=merged[i]
                merged[i]=merged[i+1]
                merged[i+1]=value
        
        #print(merged)

        result=ListNode(-1)
        lol=result
        for i in range(len(merged)):
            result.next=ListNode(merged[i])
            result=result.next
        lol=lol.next
        return lol
